[
  {
    "id": 1,
    "name": "fibonacci",
    "description": "Write a function that returns the sum of nth number in the Fibonacci sequence",
    "input": "n (0 <= n <= 100)",
    "output": "sum of nth number in the Fibonacci sequence",
    "difficulty": "easy",
    "stars": 10,
    "solved": 50,
    "starter_code": {
      "python": "def fibonacci(n):\n    pass",
      "javascript": "exports.fibonacci = function (n) {\n    // your code here\n}"
    },
    "examples": [
      {
        "id": 1,
        "input": "0",
        "output": "0",
        "explanation": "0th number in the Fibonacci sequence is 0"
      },
      {
        "id": 2,
        "input": "1",
        "output": "1",
        "explanation": "1st number in the Fibonacci sequence is 1"
      },
      {
        "id": 3,
        "input": "-1",
        "output": "1",
        "explanation": "Negative numbers are not allowed. The absolute value of -1 is 1"
      },
      {
        "id": 4,
        "input": "6",
        "output": "8",
        "explanation": "0 + 1 + 1 + 2 + 3 + 5 = 8"
      },
      {
        "id": 5,
        "input": "10",
        "output": "55",
        "explanation": "0 + 1 + 1 + 2 + 3 + 5 + 8 + 13 + 21 + 34 = 55"
      }
    ]
  },
  {
    "id": 2,
    "name": "factorial",
    "description": "Write a function that returns the factorial of a number",
    "input": "n (0 <= n <= 100)",
    "output": "factorial of n",
    "difficulty": "easy",
    "stars": 10,
    "solved": 50,
    "starter_code": {
      "python": "def factorial(n):\n    pass",
      "javascript": "exports.factorial = function (n) {\n    // your code here\n}"
    },
    "examples": [
      {
        "id": 1,
        "input": "0",
        "output": "1",
        "explanation": "Factorial of 0 is 1"
      },
      {
        "id": 2,
        "input": "1",
        "output": "1",
        "explanation": "Factorial of 1 is 1"
      },
      {
        "id": 3,
        "input": "-1",
        "output": "Factorial of negative number is not possible",
        "explanation": "Negative numbers are not allowed"
      },
      {
        "id": 4,
        "input": "5",
        "output": "120",
        "explanation": "5 * 4 * 3 * 2 * 1 = 120"
      },
      {
        "id": 5,
        "input": "10",
        "output": "3628800",
        "explanation": "10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1 = 3628800"
      }
    ]
  },
  {
    "id": 3,
    "name": "reverse_string",
    "description": "Write a function that reverses a string",
    "input": "s (string)",
    "output": "reversed string",
    "difficulty": "easy",
    "stars": 10,
    "solved": 50,
    "starter_code": {
      "python": "def reverse_string(s):\n    pass",
      "javascript": "exports.reverseString = function (str) {\n    // your code here\n}"
    },
    "examples": [
      {
        "id": 1,
        "input": "hello",
        "output": "olleh",
        "explanation": "The reverse of 'hello' is 'olleh'"
      },
      {
        "id": 2,
        "input": "world",
        "output": "dlrow",
        "explanation": "The reverse of 'world' is 'dlrow'"
      },
      {
        "id": 3,
        "input": "racecar",
        "output": "racecar",
        "explanation": "The reverse of 'racecar' is 'racecar'"
      }
    ]
  },
  {
    "id": 4,
    "name": "anagram",
    "description": "Write a function that checks if two strings are anagrams",
    "input": "s1 (string), s2 (string)",
    "output": "True if s1 is an anagram of s2, False otherwise",
    "difficulty": "easy",
    "stars": 10,
    "solved": 50,
    "starter_code": {
      "python": "def anagram(s1, s2):\n    pass",
      "javascript": "exports.anagram = function (str1, str2) {\n    // your code here\n}"
    },
    "examples": [
      {
        "id": 1,
        "input": [
          "hello",
          "world"
        ],
        "output": "False",
        "explanation": "'hello' and 'world' are not anagrams"
      },
      {
        "id": 2,
        "input": [
          "listen",
          "silent"
        ],
        "output": "True",
        "explanation": "'listen' and 'silent' are anagrams"
      },
      {
        "id": 3,
        "input": [
          "racecar",
          "carrace"
        ],
        "output": "True",
        "explanation": "'racecar' and 'carrace' are anagrams"
      }
    ]
  },
  {
    "id": 5,
    "name": "palindrome",
    "description": "Write a function that checks if a string is a palindrome",
    "input": "s (string)",
    "output": "True if s is a palindrome, False otherwise",
    "difficulty": "easy",
    "stars": 10,
    "solved": 50,
    "starter_code": {
      "python": "def palindrome(s):\n    pass",
      "javascript": "exports.palindrome = function (str) {\n    // your code here\n}"
    },
    "examples": [
      {
        "id": 1,
        "input": "hello",
        "output": "False",
        "explanation": "'hello' is not a palindrome"
      },
      {
        "id": 2,
        "input": "0_0 (: /-\\ :) 0–0",
        "output": "True",
        "explanation": "'0_0 (: /-\\ :) 0–0' is a palindrome"
      },
      {
        "id": 3,
        "input": "madam",
        "output": "True",
        "explanation": "'madam' is a palindrome"
      }
    ]
  },
  {
    "id": 11,
    "name": "merge_intervals",
    "description": "Write a function that merges overlapping intervals",
    "input": "intervals (list of lists)",
    "output": "list of merged intervals",
    "difficulty": "medium",
    "stars": 20,
    "solved": 30,
    "starter_code": {
      "python": "def merge_intervals(intervals):\n    pass",
      "javascript": "exports.mergeIntervals = function (intervals) {\n    // your code here\n}"
    },
    "examples": [
      {
        "id": 1,
        "input": "[[1,3],[2,6],[8,10],[15,18]]",
        "output": "[[1,6],[8,10],[15,18]]",
        "explanation": "The intervals [[1,3],[2,6],[8,10],[15,18]] can be merged to [[1,6],[8,10],[15,18]]"
      },
      {
        "id": 2,
        "input": "[[1,4],[4,5]]",
        "output": "[[1,5]]",
        "explanation": "The intervals [[1,4],[4,5]] can be merged to [[1,5]]"
      },
      {
        "id": 3,
        "input": "[[1,2],[3,5],[6,7],[8,10],[12,16]]",
        "output": "[[1,5],[6,7],[8,10],[12,16]]",
        "explanation": "The intervals [[1,2],[3,5],[6,7],[8,10],[12,16]] can be merged to [[1,5],[6,7],[8,10],[12,16]]"
      }
    ]
  },
  {
    "id": 12,
    "name": "binary_search",
    "description": "Write a function that performs binary search on a sorted list",
    "input": "nums (sorted list of integers), target (integer)",
    "output": "index of target if found, -1 if not found",
    "difficulty": "medium",
    "stars": 20,
    "solved": 30,
    "starter_code": {
      "python": "def binary_search(nums, target):\n    pass",
      "javascript": "exports.binarySearch = function (arr, target) {\n    // your code here\n}"
    },
    "examples": [
      {
        "id": 1,
        "input": "[1, 2, 3, 4, 5], 3",
        "output": "2",
        "explanation": "The target number 3 is found at index 2"
      },
      {
        "id": 2,
        "input": "[1, 2, 3, 4, 5], 6",
        "output": "-1",
        "explanation": "The target number 6 is not found in the list"
      },
      {
        "id": 3,
        "input": "[1, 3, 5, 7, 9], 5",
        "output": "2",
        "explanation": "The target number 5 is found at index 2"
      }
    ]
  },
  {
    "id": 13,
    "name": "rotate_array",
    "description": "Write a function that rotates an array to the right by k steps",
    "input": "nums (list of integers), k (integer)",
    "output": "rotated array",
    "difficulty": "medium",
    "stars": 20,
    "solved": 30,
    "starter_code": {
      "python": "def rotate_array(nums, k):\n    pass",
      "javascript": "exports.rotateArray = function (arr, k) {\n    // your code here\n}"
    },
    "examples": [
      {
        "id": 1,
        "input": "[1, 2, 3, 4, 5], 2",
        "output": "[4, 5, 1, 2, 3]",
        "explanation": "The array [1, 2, 3, 4, 5] rotated to the right by 2 steps becomes [4, 5, 1, 2, 3]"
      },
      {
        "id": 2,
        "input": "[1, 2, 3], 4",
        "output": "[3, 1, 2]",
        "explanation": "The array [1, 2, 3] rotated to the right by 4 steps becomes [3, 1, 2]"
      },
      {
        "id": 3,
        "input": "[1, 2, 3, 4, 5, 6, 7], 3",
        "output": "[5, 6, 7, 1, 2, 3, 4]",
        "explanation": "The array [1, 2, 3, 4, 5, 6, 7] rotated to the right by 3 steps becomes [5, 6, 7, 1, 2, 3, 4]"
      }
    ]
  },
  {
    "id": 18,
    "name": "subarray_sum_equals_k",
    "description": "Write a function that finds the total number of continuous subarrays whose sum equals to a given target k",
    "input": "nums (list of integers), k (integer)",
    "output": "number of subarrays",
    "difficulty": "medium",
    "stars": 20,
    "solved": 30,
    "starter_code": {
      "python": "def subarray_sum_equals_k(nums, k):\n    pass",
      "javascript": "exports.subarraySumEqualsK = function (nums, k) {\n    // your code here\n}"
    },
    "examples": [
      {
        "id": 1,
        "input": "[1, 1, 1], 2",
        "output": "2",
        "explanation": "There are 2 subarrays with a sum of 2: [1, 1] and [1, 1]"
      },
      {
        "id": 2,
        "input": "[1, 2, 3], 3",
        "output": "2",
        "explanation": "There are 2 subarrays with a sum of 3: [1, 2] and [3]"
      },
      {
        "id": 3,
        "input": "[1, -1, 0], 0",
        "output": "3",
        "explanation": "There are 3 subarrays with a sum of 0: [1, -1, 0], [-1, 0], and [0]"
      }
    ]
  },
  {
    "id": 20,
    "name": "kth_largest_element",
    "description": "Write a function that finds the kth largest element in an unsorted array",
    "input": "nums (list of integers), k (integer)",
    "output": "kth largest element",
    "difficulty": "medium",
    "stars": 20,
    "solved": 30,
    "starter_code": {
      "python": "def kth_largest_element(nums, k):\n    pass",
      "javascript": "exports.kthLargestElement = function (arr, k) {\n    // your code here\n}"
    },
    "examples": [
      {
        "id": 1,
        "input": "[3, 2, 1, 5, 6, 4], 2",
        "output": "5",
        "explanation": "The 2nd largest element in the array [3, 2, 1, 5, 6, 4] is 5"
      },
      {
        "id": 2,
        "input": "[3, 2, 3, 1, 2, 4, 5, 5, 6], 4",
        "output": "4",
        "explanation": "The 4th largest element in the array [3, 2, 3, 1, 2, 4, 5, 5, 6] is 4"
      },
      {
        "id": 3,
        "input": "[-1, 2, 0], 1",
        "output": "2",
        "explanation": "The 1st largest element in the array [-1, 2, 0] is 2"
      }
    ]
  }
]